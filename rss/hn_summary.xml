<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>HN 摘要</title>
    <link>https://tg.i-c-a.su</link>
    <description>由大型语言模型编写的热门 Hacker News 故事的自动摘要。</description>
    <lastBuildDate>Mon, 23 Sep 2024 05:04:30 GMT</lastBuildDate>
    <item>
      <title>[媒体] Palletrone 是一款专为空中货物运输而设计的机器人气垫车，融合了 [...]</title>
      <link>https://t.me/hn_summary/109493</link>
      <description><![CDATA[Palletrone 是一款用于将物品运送到任何地方的机器人气垫车
Palletrone 是一款专为空中货物运输而设计的机器人气垫车，融合了托盘和无人机的概念。它通过保持其滚动和俯仰为零来保持稳定的平台，即使货物装载不均匀。用户通过触摸控制其运动，无人机的 IMU 可区分人力和货物力。Palletrone 的内部螺旋桨臂可向任何方向引导推力，确保稳定性。尽管存在潜在的气流问题，但其多孔侧面结构最大限度地减少了推力的减少。目前，它需要手动控制，最多可承载 3 公斤。未来的应用包括用作飞行三脚架或移动式小车，以实现灵活的相机移动。研究人员还在开发一种用于飞行中电池更换的对接系统，以增强其实用性。]]></description>
      <guid>https://t.me/hn_summary/109493</guid>
      <pubDate>Mon, 23 Sep 2024 05:04:30 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 在我之前关于批量操作的文章中，我使用了 where id = any(:ids) 模式 [...]</title>
      <link>https://t.me/hn_summary/109492</link>
      <description><![CDATA[为什么避免在 Postgres 上使用具有可变数量绑定参数的 where id in
在我之前关于批处理操作的帖子中，我使用了 where id = any(:ids) 模式，其中 ids 绑定到 JDBC 数组，而不是 in (:id1, :id2, ...) 模式。尽管许多库处理动态 SQL 生成，但出于与查询性能无关的原因，我更喜欢 = any(:ids)。这两种模式都产生相同的查询计划和执行时间。= any(:ids) 的主要优势是查询跟踪的一致性。它在 pg_stat_statements 中生成一行聚合性能数据，而 in 模式则根据占位符的数量生成多个条目。这种一致性简化了性能监控和遥测。此外，in 运算符过去仅限于 1000 个元素，这可能会使遥测因众多查询变体而变得混乱。]]></description>
      <guid>https://t.me/hn_summary/109492</guid>
      <pubDate>Mon, 23 Sep 2024 04:51:23 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 堪萨斯州立大学 (K-State) 的研究人员发现，用 [...]</title>
      <link>https://t.me/hn_summary/109491</link>
      <description><![CDATA[研究发现，用有机肥料处理的土壤储存更多的碳
堪萨斯州立大学 (K-State) 的研究人员发现，用有机肥料（如粪肥或堆肥）处理的土壤比用化学肥料处理或未施肥的土壤储存更多的碳。该团队利用先进的同步加速器光源分析了堪萨斯州免耕玉米地的土壤，发现有机处理通过将碳保存在土壤孔隙中并将其附着在矿物质上来增强碳储存。这项研究发表在《美国土壤科学学会杂志》上，首次直接证明了有机改良剂如何改善土壤健康、微生物多样性和碳封存。Ganga Hettiarachchi 博士强调，这些发现可能带来更可持续和再生的农业实践。]]></description>
      <guid>https://t.me/hn_summary/109491</guid>
      <pubDate>Mon, 23 Sep 2024 03:20:54 GMT</pubDate>
    </item>
    <item>
      <title>这是 PiArtFrame 项目的快速更新。</title>
      <link>https://t.me/hn_summary/109490</link>
      <description><![CDATA[显示 HN：使用 C++ 实现的曼德布洛特或朱利亚分形电子纸框架
以下是 PiArtFrame 项目的快速更新。GitHub 用户 kevlol 将 runezor 的原始 Python 代码移植到 C++，从而生成一个更稳定的系统，具有可自定义的刷新时间和可调节的图像“黑色级别”。此 C++ 版本显著降低了 Raspberry Pi 的 CPU 使用率和功耗，使渲染速度更快。受这些改进的启发，我重建了 PiArtFrame，添加了朱利亚集分形，并为其他人创建了一个指南。

令人惊讶的是，我最初的显示问题是由于引脚焊接不良，而不是电子纸显示器故障。修复焊接后，我的新旧显示器都运行正常。 

组装时，使用 Raspberry Pi（我使用的是 Zero 2）、Waveshare 电子纸显示器和框架。按照提供的软件设置说明，即可在电子纸框架上欣赏美丽的分形。]]></description>
      <guid>https://t.me/hn_summary/109490</guid>
      <pubDate>Mon, 23 Sep 2024 03:06:47 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] pgroll 是一个开源命令行工具，旨在实现零停机、反向 [...]</title>
      <link>https://t.me/hn_summary/109489</link>
      <description><![CDATA[pgroll：轻松实现 PostgreSQL 零停机迁移
pgroll 是一个开源命令行工具，旨在促进 PostgreSQL 数据库的零停机、可逆模式迁移。它通过允许多个模式版本共存来解决在不中断客户端应用程序的情况下更新数据库模式的挑战。主要功能包括无数据库锁定、同时使用新旧模式版本、自动列回填和即时回滚功能。pgroll 的与众不同之处在于通过物理表上的视图使用虚拟模式，遵循扩展/收缩工作流来管理更改。它支持 PostgreSQL 14.0 或更高版本，并且是跨平台的，用 Go 编写。该项目强调易用性、安全性和社区贡献。]]></description>
      <guid>https://t.me/hn_summary/109489</guid>
      <pubDate>Mon, 23 Sep 2024 03:06:44 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 在 oldmoe.blog 上的“生产环境中 SQLite 的备份策略”中，作者强调 [...]</title>
      <link>https://t.me/hn_summary/109488</link>
      <description><![CDATA[生产环境中 SQLite 的备份策略
在 oldmoe.blog 上的“生产环境中 SQLite 的备份策略”中，作者强调了在生产环境中为 SQLite 数据库制定强大的备份策略的重要性。本文概述了备份至关重要的各种场景，例如硬件故障、管理错误和错误。作者讨论了本地备份与远程备份的优缺点，主张采用混合方法，利用远程存储的弹性，同时保持本地备份的简单性。

本文深入探讨了基础设施细节，解释了如何将 AWS 的 EBS 等分布式存储系统用作本地块设备，提供耐用性和高可用性。作者强调了使用 ZFS 和 Btrfs 等文件系统的重复数据删除和压缩功能的好处。

探讨了几种备份方法，包括：

1. Litestream：高效，但需要额外的软件和 S3 存储。
2. SQLite 的备份工具：可靠且快速，但可能会争夺空间。
3. SQLite 的 VACUUM INTO：优化数据库大小，但占用大量 CPU。
4. SQLite CLI .dump 命令：功能多样，但空间效率低下。
5. 好用的旧 cp：作者的最爱，尤其是与 Btrfs 配合使用时，因为它效率高、速度快。

作者巧妙地建议使用写时复制 (CoW) 文件系统来最大限度地减少空间使用并提高备份速度，从而无需大量存储开销即可实现频繁备份。这种方法可以实现快速恢复，并最大程度地减少数据丢失，即使在发生错误或故障时也是如此。（基于 85% 的故事文本的摘要。）]]></description>
      <guid>https://t.me/hn_summary/109488</guid>
      <pubDate>Mon, 23 Sep 2024 03:02:40 GMT</pubDate>
    </item>
    <item>
      <title>血氧仪查询语言 (OxQL) 为时间序列数据引入了一种增量指标类型，其中 [...]</title>
      <link>https://t.me/hn_summary/109487</link>
      <description><![CDATA[血氧仪查询语言 (Oxide RFD 463)
血氧仪查询语言 (OxQL) 为时间序列数据引入了一种增量指标类型，其中每个值代表特定时间范围内的变化。与累积计数器不同，增量指标具有不重叠的开始时间，每个开始时间都与前一个时间戳相匹配。这可确保每个数据点都是独立的，从而更易于聚合和分析。在 Oxide 机架中常见的累积数据会自动转换为 OxQL 中的增量指标，以避免重叠信息的复杂性。此转换允许更直接的操作，例如平均和分组。目前，无法直接选择原始累积数据，但预计未来会提供支持。]]></description>
      <guid>https://t.me/hn_summary/109487</guid>
      <pubDate>Mon, 23 Sep 2024 02:59:29 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 网站：www.beautifulpublicdata.com</title>
      <link>https://t.me/hn_summary/109486</link>
      <description><![CDATA[使用 AIS 数据可视化船舶运动
标题：使用 AIS 数据可视化船舶运动
网站：www.beautifulpublicdata.com

Jon Keegan 探索了 AIS（自动识别系统）数据的迷人世界，该系统跟踪美国最繁忙水道周围的船舶运动。AIS 类似于飞机的 ADS-B，每六分钟广播一次详细的船舶信息，有助于海上安全并提供宝贵的数据。使用 NOAA 的 Marine Cadastre 工具，Keegan 在 QGIS 中可视化了 2023 年的海上交通，揭示了抽象的电模式，这些模式在与地理特征叠加时会转变为有意义的路线。值得注意的是，AIS 数据已被操纵用于邪恶目的，例如俄罗斯涉嫌通过欺骗来逃避制裁。此外，Global Fishing Watch 使用 AIS 来监控捕鱼活动，但只有 2% 的船只遵守规定。Keegan 的创造性方法和 Ambient Shipping 等工具为海上运动提供了独特的见解。]]></description>
      <guid>https://t.me/hn_summary/109486</guid>
      <pubDate>Mon, 23 Sep 2024 02:49:19 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] GitHub 上的“Coffee Stats”项目旨在帮助用户确定他们是否[...]</title>
      <link>https://t.me/hn_summary/109485</link>
      <description><![CDATA[咖啡统计数据——最大限度地摄入咖啡因，晚上睡觉
GitHub 上的“咖啡统计数据”项目旨在通过提供有关咖啡因水平的统计数据（尤其是与就寝时间相关的数据）来帮助用户确定是否应该再喝一杯咖啡。用户可以输入自定义的咖啡因量和睡眠时间以获得个性化的见解。该项目使用 Python 3.12.5 构建，并基于几个假设，例如用户健康且具有典型的遗传学。它通过提供一种实用的工具来管理咖啡因摄入量以平衡警觉性和睡眠而脱颖而出。该项目分别感谢 Aman Kharwal 和 Freepik 对编程模板和标题图像的贡献。]]></description>
      <guid>https://t.me/hn_summary/109485</guid>
      <pubDate>Mon, 23 Sep 2024 02:49:16 GMT</pubDate>
    </item>
    <item>
      <title>在这篇关于 Oils 项目的回顾中，作者反思了该项目的历程和面临的挑战 [...]</title>
      <link>https://t.me/hn_summary/109484</link>
      <description><![CDATA[Oils 项目回顾
在这篇关于 Oils 项目的回顾中，作者回顾了过去一年的历程和面临的挑战。Oils 是一个旨在实现 Shell 脚本现代化的项目，它既有成功也有挫折。主要成就包括开发 J8 表示法和用 mycpp 替换 OPy 字节码编译器。然而，将 OSH 翻译成 YSH 以及过于注重语法而不是语义被认为是失误。该项目本质上很复杂，因为它的目标是摆脱 Unix、C 和 bash 的“贝尔实验室时间线”。作者还强调了保持兼容性所需的巨大努力以及 bash 庞大规模所带来的挑战。尽管存在这些障碍，但该项目仍然保持灵活性并不断发展，这在一定程度上要归功于 NLnet 的资助和社区的贡献。作者强调了互操作性的重要性以及 Oils 作为个人研究工作的独特地位，不受商业压力的影响。（基于 62% 的故事文本的摘要。）]]></description>
      <guid>https://t.me/hn_summary/109484</guid>
      <pubDate>Mon, 23 Sep 2024 02:14:01 GMT</pubDate>
    </item>
    </channel>
</rss>