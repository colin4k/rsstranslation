<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Sat, 31 May 2025 06:04:05 GMT</lastBuildDate>
    <item>
      <title>宣布Dotnet Run App.cs-从C＃和.NET 10- .NET博客开始的一种简单方法</title>
      <link>https://www.reddit.com/r/programming/comments/1kzpuif/announcing_dotnet_run_appcs_a_simpler_way_to/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/atulin      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1kzpuif/announcing_dotnet_run_appcs_a_simpler_way_to/</guid>
      <pubDate>Sat, 31 May 2025 05:51:52 GMT</pubDate>
    </item>
    <item>
      <title>langflow rce漏洞：python exec（）失误如何导致未身份验证的代码执行</title>
      <link>https://www.reddit.com/r/programming/comments/1kzp1z6/langflow_rce_vulnerability_how_a_python_exec/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/namit2111      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1kzp1z6/langflow_rce_vulnerability_how_a_python_exec/</guid>
      <pubDate>Sat, 31 May 2025 05:02:32 GMT</pubDate>
    </item>
    <item>
      <title>基于DL的股票关闭价格预测模型</title>
      <link>https://www.reddit.com/r/programming/comments/1kzoyua/dl_based_stock_closing_price_prediction_model/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  在过去的3-4个月中，我一直在制作一个基于Python的机器学习项目，我很高兴分享它终于可以产生令人有希望的结果！ 该模型旨在预测第二天的库存盘价，并准确地将其重复使用1.5％。最受欢迎的反馈，建议和贡献。如果您发现它有用或有趣，请随时使用！  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32;  /u/Vodka-Tequilla   [link]   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1kzoyua/dl_based_stock_closing_price_prediction_model/</guid>
      <pubDate>Sat, 31 May 2025 04:57:39 GMT</pubDate>
    </item>
    <item>
      <title>微服务中的共享数据库模式：当规则违反时</title>
      <link>https://www.reddit.com/r/programming/comments/1kzopew/shared_database_pattern_in_microservices_when/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  每个人都说“切勿在微服务之间共享数据库”。但是有时现实迫使您的手 - 传统迁移，紧迫的截止日期或绩效要求使得共享数据库必要。问题不是它是否理想（不是），而是当您别无选择时如何安全地执行。 共享数据库模式意味着多个微服务访问相同的数据库实例。这就像多个室友共享厨房 - 它可以工作，但需要严格的规则和仔细的协调。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/vturan23     [link]   ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1kzopew/shared_database_pattern_in_microservices_when/</guid>
      <pubDate>Sat, 31 May 2025 04:42:15 GMT</pubDate>
    </item>
    <item>
      <title>最终的Java并发和多线程路线图（深，可转移，永恒）</title>
      <link>https://www.reddit.com/r/programming/comments/1kzmx32/the_ultimate_java_concurrency_multithreading/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  大家好，我已经在Java中发布了一个有关并发和多线程的博客。请检查一下并分享您的意见。  并发＆amp; Multithreading │ ├── 1. Mutual Exclusion → Locking, reentrancy, intrinsic monitors ├── 2. Visibility → Volatile, memory model, happens-before ├── 3. Atomicity → Compare-and-swap,原子原始原子&lt; /code&gt;  ├ -  4。协调→等待 /通知，锁存，信号范围&lt; /code&gt;  ├├├├├。 ├── 7. Immutability → final fields, value objects, collections ├── 8. Parallelism → Fork/Join, Streams, Spliterators └── 9. Thread Lifecycle → States, interrupt, daemon, priority   提交由＆＃32; /u/u/nikhiltiwari005     [link]   ＆＃32;   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1kzmx32/the_ultimate_java_concurrency_multithreading/</guid>
      <pubDate>Sat, 31 May 2025 03:01:22 GMT</pubDate>
    </item>
    <item>
      <title>我们使用AI重写了API的大部分</title>
      <link>https://www.reddit.com/r/programming/comments/1kzla24/we_rewrote_large_parts_of_our_api_in_go_using_ai/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/karagenit     &lt;a href =“ https://www.reddit.com/r/programming/comments/1kzla24/we_rewrote_parts_parts_of_our_api_in_go_using_using_ai/”]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1kzla24/we_rewrote_large_parts_of_our_api_in_go_using_ai/</guid>
      <pubDate>Sat, 31 May 2025 01:32:47 GMT</pubDate>
    </item>
    <item>
      <title>TinyAPL第1部分：介绍和数组</title>
      <link>https://www.reddit.com/r/programming/comments/1kzjpjz/tinyapl_part_1_introduction_and_arrays/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/ketralnis       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1kzjpjz/tinyapl_part_1_introduction_and_arrays/</guid>
      <pubDate>Sat, 31 May 2025 00:13:33 GMT</pubDate>
    </item>
    <item>
      <title>Java虚拟线程吃了我的内存：网络爬网的速度与记忆的故事</title>
      <link>https://www.reddit.com/r/programming/comments/1kzjpbk/java_virtual_threads_ate_my_memory_a_web_crawlers/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/ketralnis     [link]        &lt;a href =“ https://www.reddit.com/r/programming/comments/1kzjpbk/java_virtual_threads_ate_my_my_memory_memory_a_web_crawlers/]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1kzjpbk/java_virtual_threads_ate_my_memory_a_web_crawlers/</guid>
      <pubDate>Sat, 31 May 2025 00:13:15 GMT</pubDate>
    </item>
    <item>
      <title>探索Yini的四种字符串字面类型：原始，经典，超级和三重引用</title>
      <link>https://www.reddit.com/r/programming/comments/1kzg0m7/exploring_yinis_four_string_literal_types_raw/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  嘿，大家 - 我一直在使用yini（一种轻巧的配置格式，将INI的简单性与JSON/YAML/python的一些不错的位融为一体）。我想到的一件事是Yini如何为字符串文字提供四种不同的样式。我以为我会分享每个人的短暂摘要，何时他们可能会派上用场...   1。原始字符串（默认）   语法： no prefix（或可选的 r // r ）      quotes：   &#39;... 仅单行 没有逃生处理（ \ 是字面的）       非常适合：文件路径，等级模式，以至于    empl&gt; yini&gt; yini&gt; yini&gt; yini&gt; yini） ＆quot c：\ users \ alice \ documents \＆quort \＆quort ＃BackSlashes保持字面意思1 =&#39;他向他打招呼，“你好” Message2 =&#39;不用担心！＆quot;    2。经典字符串（C风格）   语法：   c / c  c        quotes：    c&#39;... 仅单行 全面支持C风格的Escapes（ \ n ， \ t ， \\ ， \ code&gt; \ u1234 等序列。   示例（yini）：  yini engreting = c＆quot; hello，\ nworld！ omega = c＆quot \ u03a9是希腊大写字母omega;    3。超级字符串（H-strings）    语法：   h / h  h        quotes：    h&#39;...&#39;...&#39;...&#39;...&#39;...&#39;...&#39;...&#39;...&#39;... 允许的多行 修剪领先/尾随的空格＆amp; newlines  白色空间/新线崩溃到单个空间中 无逃生处理         非常适合：漫长的散文或嵌入式段落或嵌入式段落，您希望在任何地方都要“流动”，而无需手动break。 ``yini description = h＆quot;这是一个超级字符串。它跨越多行，但作为一个整洁的段落。 &#39; ⇒这是一个超级字符串。它跨越多行，但呈现为一个整洁的段落。＆quot&#39; ````  4。三重引用的字符串   语法：   &#39;... Multi-line, preserves every character (newlines, spaces) No escape processing  Behavior (C-Triple):  Multi-line, but interprets escapes like a C-string  Great for: Blocks where exact fidelity事务 - 插入了JSON，代码片段，诗歌等。    示例（yini）：`这是一个超级字符串。它跨越多行，但作为一个整洁的段落。 &#39; ⇒这是一个超级字符串。它跨越多行，但作为一个整洁的段落。&#39; `` ``  conventeration   conventation   conventation converation  ，无论任何两个（或更多）yini字符串，无论类型，无论在任何字体上，无论&lt;&gt;+ emtter y y y/proge  yini engreting =;嗨，你好。 + c＆quot \ n＆quot   您对上述这些内容是否涵盖现实世界需求的范围，很想听听！ 我很好奇 - 您是否认为这四种字符串类型涵盖了各种各样的内容，您是否需要在现实世界中代表这些内容？很想听听我可能错过的任何差距或用例！ 有关Yini的更多信息，请参阅：晚上！  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/usef_tune_6830       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1kzg0m7/exploring_yinis_four_string_literal_types_raw/</guid>
      <pubDate>Fri, 30 May 2025 21:27:43 GMT</pubDate>
    </item>
    <item>
      <title>机器人控制中的结构并发</title>
      <link>https://www.reddit.com/r/programming/comments/1kzeqea/structured_concurrency_in_robot_control/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/ketralnis       [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1kzeqea/structured_concurrency_in_robot_control/</guid>
      <pubDate>Fri, 30 May 2025 20:34:50 GMT</pubDate>
    </item>
    <item>
      <title>React的Usestate应需要一个依赖性阵列</title>
      <link>https://www.reddit.com/r/programming/comments/1kzepih/reacts_usestate_should_require_a_dependency_array/</link>
      <description><![CDATA[＆＃32;提交由＆＃32;  /u/ketralnis   [link]   [commist]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1kzepih/reacts_usestate_should_require_a_dependency_array/</guid>
      <pubDate>Fri, 30 May 2025 20:33:49 GMT</pubDate>
    </item>
    <item>
      <title>我保留的五个意见，放手，并成为软件构建器和领导者</title>
      <link>https://www.reddit.com/r/programming/comments/1kzdgzg/five_opinions_ive_kept_let_go_and_picked_up_as_a/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  在领导平台和各种环境的产品团队之后，我写下了对我的时间考验的观点，以及我在此过程中丢弃或拾取的意见。 仍然相信：类型语言，不管是连续部署的公司，无论公司还是不断地交付的公司，都可以兑现公司，无论公司还是不管是公司的。其他人的年龄不好。我曾经认为测试金字塔是神圣的，并且预播应该镜像。我改变了主意。他们的成本通常比回馈的费用高。 很想听听别人的声音： you     hote，释放或学习困难的方式？  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/joaoqalves     [link]        [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1kzdgzg/five_opinions_ive_kept_let_go_and_picked_up_as_a/</guid>
      <pubDate>Fri, 30 May 2025 19:43:03 GMT</pubDate>
    </item>
    <item>
      <title>让我们做游戏吧！ 269：生命值和距离</title>
      <link>https://www.reddit.com/r/programming/comments/1kzd8yf/lets_make_a_game_269_hit_points_and_distance/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/apeloverage      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1kzd8yf/lets_make_a_game_269_hit_points_and_distance/</guid>
      <pubDate>Fri, 30 May 2025 19:33:43 GMT</pubDate>
    </item>
    <item>
      <title>探索“无建造客户岛”：未来证明Web应用程序的（新的？）模式</title>
      <link>https://www.reddit.com/r/programming/comments/1kzcdgh/exploring_nobuild_client_islands_a_new_pattern/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  嘿 r/programming  folks 我一直在探索一个模式，我一直在探索我称之为&#39;no-buy quot of bey;极简主义库避免构建工具和框架流失。  全文带有代码＆amp;理由：  https://mozanunal.com/2025/2025/05/client-islands/  （类似于Astro所做的），但是完全在客户端：1。初始HTML最小。 2。 page.js 处理路由和获取/渲染页面壳（它们是用htm定义的提前组件）。 3。特定的交互式“岛”然后将组件安装在这些外壳中。   Core JavaScript堆栈＆amp;想法：    天然ES模块：直接将所有JavaScript加载到浏览器中。        作为轻巧（4KB）vdom渲染引擎。    htm（超级标记标记标记标记）：提供JS型的syntax，直接在JS template文字中，而无需Babel或任何TressPiels Presspiles /emppiles 。这是“不建立”的关键部分。方面。   pag.js：一个微小的客户端路由器（〜2.5kb）。   @preeact/signals/signals/signals：可选，用于细粒度的反应性（〜1.3kb）。 （使用ES模块，preact/htm），直接运送。 * 更简单的开发经验： no  npm安装对于核心运行时，没有复杂的 vite.config.js 或 webpack.config.js 。 * 利用浏览器标准：在很大程度上依赖于ES模块和浏览器功能。 * 小足迹：组合的核心运行时很小。 *  Clarity＆amp;可辩论性：在您的代码和浏览器中运行的内容之间的抽象层较少。 我将其视为构建多种类型的Web应用程序的一种实用方法 r/编程对这种“不建立”的可行性和权衡的想法某些类别的Web应用程序的范例。该行业在复杂的构建工具链上是否过度稳定？  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/mozanunal      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1kzcdgh/exploring_nobuild_client_islands_a_new_pattern/</guid>
      <pubDate>Fri, 30 May 2025 18:57:56 GMT</pubDate>
    </item>
    <item>
      <title>停止每次该死的氛围编码！</title>
      <link>https://www.reddit.com/r/programming/comments/1kzc6qe/stop_vibe_coding_every_damn_time/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  对生成的代码斜率被科技社交媒体宣传为“下一个”对于开发人员而言，我已经写了一篇关于“ Vibe Coding”的挫败感的文章。以及技术的初学者应采用AI辅助软件开发的世界。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/u/adityaoberai1      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1kzc6qe/stop_vibe_coding_every_damn_time/</guid>
      <pubDate>Fri, 30 May 2025 18:50:14 GMT</pubDate>
    </item>
    <item>
      <title>小事的魔力 -  10年的微服务•詹姆斯·刘易斯</title>
      <link>https://www.reddit.com/r/programming/comments/1kzbu20/the_magic_of_small_things_10_years_of/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/goto-con       [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1kzbu20/the_magic_of_small_things_10_years_of/</guid>
      <pubDate>Fri, 30 May 2025 18:35:31 GMT</pubDate>
    </item>
    <item>
      <title>为什么LISP宏很酷，一个Perl的视角</title>
      <link>https://www.reddit.com/r/programming/comments/1kzbodf/why_lisp_macros_are_cool_a_perl_perspective/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/ketralnis      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1kzbodf/why_lisp_macros_are_cool_a_perl_perspective/</guid>
      <pubDate>Fri, 30 May 2025 18:28:59 GMT</pubDate>
    </item>
    <item>
      <title>BouncyHSM 1.5.0- HSM和SmartCard Simulator的软件模拟器，现在使用PKCS＃11 v3.0机制</title>
      <link>https://www.reddit.com/r/programming/comments/1kzbazs/bouncyhsm_150_software_simulator_of_hsm_and/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  弹力HSM是带有HTML UI，REST API和PKCS＃11接口的HSM和SmartCard Simulator的软件模拟器。  最新版本引入了对PKCS＃11 v3.0各种机制的支持，包括：    SHA3和Blake2机制，  salsa20机制 mongomery曲线（x25519，x448）。  它还具有直接从Web界面编辑Crypto对象属性的功能。 Among its newest features is enhanced support for key unwrapping mechanisms using AES-based keys. Bouncy HSM v1.5.0 includes a total of 166 cryptographic机制。 版本： https：// https：// https：/  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/u/harrison_314       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1kzbazs/bouncyhsm_150_software_simulator_of_hsm_and/</guid>
      <pubDate>Fri, 30 May 2025 18:13:54 GMT</pubDate>
    </item>
    <item>
      <title>高速缓存意识哈希地图</title>
      <link>https://www.reddit.com/r/programming/comments/1kzaony/cache_conscious_hash_maps/</link>
      <description><![CDATA[＆＃32;提交由＆＃32;  /u/mooreds   [link] ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1kzaony/cache_conscious_hash_maps/</guid>
      <pubDate>Fri, 30 May 2025 17:49:03 GMT</pubDate>
    </item>
    <item>
      <title>超越实践的编程[PDF]</title>
      <link>https://www.reddit.com/r/programming/comments/1kzagua/programming_beyond_practices_pdf/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/ketralnis       [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1kzagua/programming_beyond_practices_pdf/</guid>
      <pubDate>Fri, 30 May 2025 17:40:28 GMT</pubDate>
    </item>
    </channel>
</rss>